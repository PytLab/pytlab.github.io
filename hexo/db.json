{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/freemind/source/js/search.js","path":"js/search.js","modified":0},{"_id":"themes/freemind/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/freemind/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/freemind/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0},{"_id":"themes/freemind/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/freemind/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/freemind/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/freemind/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/freemind/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/freemind/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0},{"_id":"source/assets/images/favicon/icon.png","path":"assets/images/favicon/icon.png","modified":0},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0},{"_id":"source/assets/images/favicon/icon.ico","path":"assets/images/favicon/icon.ico","modified":0},{"_id":"themes/freemind/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0},{"_id":"source/assets/images/avatar/Floe.jpg","path":"assets/images/avatar/Floe.jpg","modified":0},{"_id":"themes/freemind/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/freemind/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/freemind/source/css/style.css","path":"css/style.css","modified":0},{"_id":"themes/freemind/source/css/responsive.css","path":"css/responsive.css","modified":0},{"_id":"themes/freemind/source/css/highlight.css","path":"css/highlight.css","modified":0},{"_id":"themes/freemind/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0},{"_id":"themes/freemind/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0},{"_id":"themes/freemind/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0},{"_id":"themes/freemind/source/css/bootstrap-responsive.css","path":"css/bootstrap-responsive.css","modified":0}],"Cache":[{"_id":"source/_posts/2015-02-08-hello-world-2.md","shasum":"dcec54931c5641d39aa12ca1711eae086762010e","modified":1453384927181},{"_id":"source/_posts/2015-02-08-自动登陆华理校园网的python脚本.md","shasum":"50534d40bb0a4ed8084411891b1c83db42e6d6e8","modified":1453384915358},{"_id":"source/_posts/2015-06-14-动力学模型已兼容相对能量的输入文件.md","shasum":"799187186d133b845ff41902650a8a3fbfde4b15","modified":1453385828835},{"_id":"source/_posts/2015-06-14-有共鸣啦.md","shasum":"33234f8f2a26e9bd4cadf623c00cd7a0b2eed3a7","modified":1453385430301},{"_id":"source/_posts/2015-08-12-VASPy一个面向对象的VASP文件处理库.md","shasum":"720dd75b12ab743a3c30156a51224bd40448eafc","modified":1453390322042},{"_id":"source/_posts/2015-08-14-关于逻辑运算符.md","shasum":"21586b1a9c1130a70383866e5e8c32dadb49231b","modified":1453385180760},{"_id":"source/_posts/2015-08-17-C-NOTE--数组初始化总结.md","shasum":"00941f5606b7960d586ac2814edc2ef293b52c8d","modified":1453385100790},{"_id":"source/_posts/2015-08-22-具有局部作用域的变量是否可以在作用域外使用.md","shasum":"6f108bd01b1cf2406655bfa17d8f42418205bc2d","modified":1453384938418},{"_id":"source/_posts/2015-08-29-git-push的时候用ssh放弃https.md","shasum":"80009b1e2119a38c6102f564bf9042928adfe32f","modified":1453384953328},{"_id":"source/_posts/2015-09-01-关于Fortran和C数组的优先模式.md","shasum":"41c159b43b858cb11074ba8fdac5667b3467f4c2","modified":1453384993815},{"_id":"source/_posts/2015-09-03-Fortran数组初始化总结.md","shasum":"a7fd494447f02eff5bb5ea43e890eafff9cefd03","modified":1453384960985},{"_id":"source/_posts/2016-01-21-华丽的昏割线.md","shasum":"1a80f57efc0c1ce00ab412be5687988de6802a01","modified":1453384593702},{"_id":"source/_posts/2015-10-09-开始看VASP源码.md","shasum":"a0cf13c7f05513ea7f5c5ea6e97e1e9ebf1c4baf","modified":1453384883422},{"_id":"source/_posts/2016-01-21-我的博客新家.md","shasum":"99e8f5f47e9911e7282697a3c3e7a7319e0b070b","modified":1453378832133},{"_id":"source/about/index.html","shasum":"3a6e7a51cd64824a0e70906a17a3fb80cb44792c","modified":1453426912393},{"_id":"source/about-me/index.md","shasum":"3c038023937cc2c3b996e3d34b35049008af854a","modified":1453382640797},{"_id":"source/assets/images/favicon/icon.ico","shasum":"28a6139a9c91cfb1dd1205db174d0586714b074f","modified":1396015466000},{"_id":"source/assets/images/favicon/icon.png","shasum":"57cf7b1a15bd6ed60a3086d3f5e6324b60829719","modified":1453373599944},{"_id":"source/categories/index.html","shasum":"49067cc86161b98d32aa55c0ae09a8be3290217a","modified":1453424620333},{"_id":"source/tags/index.html","shasum":"36703d122b04dbd632cb1c00ecd51a9493dddec6","modified":1453424723495},{"_id":"themes/freemind/LICENSE","shasum":"4c3f507519574b22886c185c0114bc49bd4eb22e","modified":1453424142659},{"_id":"themes/freemind/README.md","shasum":"f9bc00c403348a3795566838d3a6735dd566cafa","modified":1453424142660},{"_id":"themes/freemind/_config.yml","shasum":"3f507c779c1b8fb6b9fbbdb1c05d52f36c314fba","modified":1453427157642},{"_id":"themes/freemind/languages/default.yml","shasum":"175fa1bd6f3744f81326b8e7c9a3dfad07199270","modified":1453424142663},{"_id":"themes/freemind/languages/pt-BR.yml","shasum":"e58d02636dc47f698cc6c2045edffc1a08772639","modified":1453424142664},{"_id":"themes/freemind/languages/zh-CN.yml","shasum":"37b0b97471e646caf67404b447474b6da9fae564","modified":1453424142665},{"_id":"themes/freemind/languages/zh-TW.yml","shasum":"633a09b238cfadcf3c6f3dbec58cf60822d23a44","modified":1453424142666},{"_id":"themes/freemind/layout/_partial/after_footer.ejs","shasum":"2ed3a4fb19531827b0f252cbaa2699e985765adc","modified":1453424142668},{"_id":"themes/freemind/layout/_partial/archive.ejs","shasum":"d08b437664caf72ee62a2f5c7b1d34eefb689595","modified":1453424142668},{"_id":"themes/freemind/layout/_partial/article.ejs","shasum":"e1f01efd5455ec446284a2aa1f955a88d442b45c","modified":1453424142669},{"_id":"themes/freemind/layout/_partial/footer.ejs","shasum":"28a084970b8c3adfd9406c09879d8b019b8b1ce2","modified":1453424142670},{"_id":"themes/freemind/layout/_partial/head.ejs","shasum":"88ac97d2a6416c249cbc314ddd26b8516dc2b8b0","modified":1453424142671},{"_id":"themes/freemind/layout/_partial/index.ejs","shasum":"0bd770f5281919857f9bd913f61851e5555201d3","modified":1453424142672},{"_id":"themes/freemind/layout/_partial/index_pagination.ejs","shasum":"aa7f6a968e4611a955bd593d691d44a9a720efc0","modified":1453424142673},{"_id":"themes/freemind/layout/_partial/navigation.ejs","shasum":"e4d9af8d4cae60541a8e8f0f8caeeb28aaf5ca33","modified":1453424142674},{"_id":"themes/freemind/layout/_partial/post/analytics.ejs","shasum":"5edcbdd411b9d95ef11844ccf1454fdf978cee01","modified":1453424142675},{"_id":"themes/freemind/layout/_partial/post/category.ejs","shasum":"cc5b4cc95af6d5df4f7d1f1301dad8d4a5c7f8d0","modified":1453424142676},{"_id":"themes/freemind/layout/_partial/post/comment.ejs","shasum":"82509e7747c5025e92a7084ae6b15271a6bd68e2","modified":1453424142677},{"_id":"themes/freemind/layout/_partial/post/comment_footer.ejs","shasum":"b3a6db566afdf0931909013926b7008eac9129ee","modified":1453424142677},{"_id":"themes/freemind/layout/_partial/post/entry.ejs","shasum":"c7a40f6fa8297daeb7f4c7ec35985c412094bc7b","modified":1453424142679},{"_id":"themes/freemind/layout/_partial/post/meta.ejs","shasum":"8ffb7e119422392043fcc498e2db3bb27d97c8b8","modified":1453424142680},{"_id":"themes/freemind/layout/_partial/post/pagination.ejs","shasum":"ad0f08f7b163895d99aedcaa5dab2669fac429b7","modified":1453424142681},{"_id":"themes/freemind/layout/_partial/post/share.ejs","shasum":"991cf130c37f08c7e948772fb45587592b165b55","modified":1453424142682},{"_id":"themes/freemind/layout/_partial/post/slogan.ejs","shasum":"422f8cceb07a772046d3a92a99c01f158f52003f","modified":1453424142683},{"_id":"themes/freemind/layout/_partial/post/tag.ejs","shasum":"ae292045468812e678780288e51b1b19fa7e3e0c","modified":1453424142683},{"_id":"themes/freemind/layout/_partial/post/title.ejs","shasum":"983fc922ebcfff0618027c51f4a9913159a1a0ba","modified":1453424142684},{"_id":"themes/freemind/layout/_partial/search.ejs","shasum":"f00bcd7cdef50a727600960de1d8b6a9e9b360b4","modified":1453424142685},{"_id":"themes/freemind/layout/_partial/sidebar.ejs","shasum":"0574610968679984f6aec4b31fbba655df972d28","modified":1453424142686},{"_id":"themes/freemind/layout/_widget/category.ejs","shasum":"7452e116d550f8a5c5beff8cac3ac56645f035ae","modified":1453424142687},{"_id":"themes/freemind/layout/_widget/links.ejs","shasum":"209f60bec33c1179dff9bd09c66dc2c036246b40","modified":1453424142688},{"_id":"themes/freemind/layout/_widget/recent_posts.ejs","shasum":"a9333350df895e2bc85c60c17c47a6a1dfa846e7","modified":1453424142689},{"_id":"themes/freemind/layout/_widget/search.ejs","shasum":"cc322c98ca8420d1b5a31a7337249b403c661b80","modified":1453424142689},{"_id":"themes/freemind/layout/_widget/tagcloud.ejs","shasum":"4d592eb23466383f3224e36474b2e4dfe85e4d42","modified":1453424142690},{"_id":"themes/freemind/layout/archive.ejs","shasum":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1453424142691},{"_id":"themes/freemind/layout/index.ejs","shasum":"b3b36fe43b7edded7246096f1b78fb75b4da2245","modified":1453424142693},{"_id":"themes/freemind/layout/categories.ejs","shasum":"75931cf16ce89871f53d09e918109bcb0c7741a1","modified":1453424142692},{"_id":"themes/freemind/layout/layout.ejs","shasum":"cd333c7859008552037659012011990a9b32d2c4","modified":1453424142694},{"_id":"themes/freemind/layout/page.ejs","shasum":"21612a42b29cb20f106bc2716c598e69db142750","modified":1453424142695},{"_id":"themes/freemind/layout/post.ejs","shasum":"8535eadbfcb7e52325f16da412ecc04cd1426203","modified":1453424142696},{"_id":"themes/freemind/layout/tags.ejs","shasum":"4a39d2fe5cd2b005b9a18b30a11566d631a977fe","modified":1453424142696},{"_id":"themes/freemind/source/css/bootstrap-responsive.css","shasum":"4f241755f6192c31cf35f0b0f919d918d96a6eee","modified":1453424142699},{"_id":"themes/freemind/source/css/font-awesome.css","shasum":"edf2017cce9bd3dac2d9936bc4bd909471893733","modified":1453424142703},{"_id":"themes/freemind/source/css/google-fonts.css","shasum":"72e8af5cd1aed1ff7288cc360b768f623b201848","modified":1453424142704},{"_id":"themes/freemind/source/css/highlight.css","shasum":"9b2aee2d58407934334bbe23d7db4a5c1910ac9c","modified":1453424142704},{"_id":"themes/freemind/source/css/responsive.css","shasum":"6be6e8b146b969693f3e9257b46c06fc9e090ccb","modified":1453424142705},{"_id":"themes/freemind/source/css/style.css","shasum":"7b57f828f7b94db3fe18e8f4d2b046e183c9ee84","modified":1453424142706},{"_id":"themes/freemind/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1453424142708},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1453424142708},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1453424142712},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1453424142714},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1453424142715},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1453424142716},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1453424142717},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1453424142718},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1453424142722},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1453424142733},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","shasum":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1453424142735},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","shasum":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1453424142736},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","shasum":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1453424142738},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","shasum":"f401d51152681048c06187c5d3919b1407b899c5","modified":1453424142740},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","shasum":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1453424142742},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","shasum":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1453424142743},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","shasum":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1453424142744},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","shasum":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1453424142745},{"_id":"themes/freemind/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1453372020842},{"_id":"themes/freemind/source/img/github-sprite.png","shasum":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1453424142747},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","shasum":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1453424142748},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","shasum":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1453424142749},{"_id":"themes/freemind/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1453372020845},{"_id":"themes/freemind/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1453372020848},{"_id":"themes/freemind/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1453372020849},{"_id":"themes/freemind/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1453372020852},{"_id":"themes/freemind/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1453372020853},{"_id":"themes/freemind/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1453372020854},{"_id":"themes/freemind/source/js/bootstrap.min.js","shasum":"9933cdc70c0047a3ea1a196f9320c36737b93c2a","modified":1453424142752},{"_id":"themes/freemind/source/js/gallery.js","shasum":"53c6538ae764f8fa922ff57028f14a20a8a2edb8","modified":1453424142753},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","shasum":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1453424142756},{"_id":"themes/freemind/source/js/main.js","shasum":"adeefe412e7ec9644f74c922a6419caae0174393","modified":1453424142757},{"_id":"themes/freemind/source/js/search.js","shasum":"4c155158685fc34bcde4c5a8be8d2f5d236f168f","modified":1453424142758},{"_id":"source/assets/images/avatar/Floe.jpg","shasum":"a8f4ae81afd601db43fda6824915cd2086c9bdf4","modified":1453373111337},{"_id":"themes/freemind/source/css/bootstrap.min.css","shasum":"b982b68f818bba6fc9fead73d25d96a48972311e","modified":1453424142701},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1453424142721},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","shasum":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1453424142731},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","shasum":"3dad20239301f9ee22f22ca7d5ac6eca1da4ac22","modified":1453424142755},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","shasum":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1453424142728},{"_id":"public/tags/index.html","modified":1453428050946,"shasum":"598796cfbe4f2b7948219d0eb8cfd93d171b641e"},{"_id":"public/categories/index.html","modified":1453428050978,"shasum":"875d27809a5a32f1eb583f28635955123bba353d"},{"_id":"public/about-me/index.html","modified":1453428051000,"shasum":"2cac5e7f16e43126aac2003ede07f0cc8010ea63"},{"_id":"public/about/index.html","modified":1453427757551,"shasum":"4924b597bff9642963dd8022984f1c74c1638049"},{"_id":"public/2016/01/21/我的博客新家/index.html","modified":1453427757571,"shasum":"4024fda1dcaf4733c0c4d03a25bdf83b8362577d"},{"_id":"public/2016/01/21/华丽的昏割线/index.html","modified":1453427757596,"shasum":"d68be910bb8ca33d902987441283b96c4215e0f2"},{"_id":"public/2015/10/09/开始看VASP源码/index.html","modified":1453427757629,"shasum":"aa0b77005bd40afdd094f2473a4d26bb13ab547e"},{"_id":"public/2015/09/03/Fortran数组初始化总结/index.html","modified":1453427757649,"shasum":"bf806e650fee07142ee45425c1ca6905bb0a035a"},{"_id":"public/2015/09/01/关于Fortran和C数组的优先模式/index.html","modified":1453427757676,"shasum":"d9479aeada8ba4529db6cebb4fbcc92140c116a6"},{"_id":"public/2015/08/29/git-push的时候用ssh放弃https/index.html","modified":1453427757708,"shasum":"f7493f36b42bafbb4ee7577f7b958bebd45595bf"},{"_id":"public/2015/08/22/具有局部作用域的变量是否可以在作用域外使用/index.html","modified":1453427757723,"shasum":"1968de5c9518f5e7fe96e327ba5c655e0ea8f8c3"},{"_id":"public/2015/08/17/C-NOTE--数组初始化总结/index.html","modified":1453427757739,"shasum":"f46dafbc9743e34cbf41007d0edb10e61d2f572d"},{"_id":"public/2015/08/14/关于逻辑运算符/index.html","modified":1453427757752,"shasum":"4f946a0fa84d884a9866792eafc899abeb4af555"},{"_id":"public/2015/08/12/VASPy一个面向对象的VASP文件处理库/index.html","modified":1453427757768,"shasum":"0daacefe22ea674865a4d752f7a050d501752136"},{"_id":"public/2015/06/14/有共鸣啦/index.html","modified":1453427757782,"shasum":"274be0dd06e07bb7ee98e6251353cf284c574c5e"},{"_id":"public/2015/06/14/动力学模型已兼容相对能量的输入文件/index.html","modified":1453427757791,"shasum":"afc0c7f9e36866baca8f289cdcf89570d26b5933"},{"_id":"public/2015/02/08/自动登陆华理校园网的python脚本/index.html","modified":1453427757804,"shasum":"baa8244103601bf9cca9a70dca76a3140077a333"},{"_id":"public/2015/02/08/hello-world-2/index.html","modified":1453427757815,"shasum":"98ffe6a1ffaab78bc262c451e0439b2f901c0e02"},{"_id":"public/archives/index.html","modified":1453428051157,"shasum":"109213f8bca0f9ea7be58716bc7ca45ee06fb61e"},{"_id":"public/archives/page/2/index.html","modified":1453428051171,"shasum":"a73c0b74f954c180524cae65cf5c4f3bdfcd90ce"},{"_id":"public/archives/2015/index.html","modified":1453428051191,"shasum":"b0779e7c04aa69a2a33382d21972f094d0462c11"},{"_id":"public/archives/2015/page/2/index.html","modified":1453428051201,"shasum":"b981fbb34695647fb9b2f4dcb141b5fb225ee33f"},{"_id":"public/archives/2015/02/index.html","modified":1453428051218,"shasum":"e81a5a3d58457373275e72a9f8d92b6ec4de7390"},{"_id":"public/archives/2015/06/index.html","modified":1453428051230,"shasum":"3d6df0df69143eecff43a4e53121382c92836e2a"},{"_id":"public/archives/2015/08/index.html","modified":1453428051241,"shasum":"8755350f52fd1850a70c2baa3cc41d08de431c18"},{"_id":"public/archives/2015/09/index.html","modified":1453428051251,"shasum":"a07ac9b93f647dcd86c006a13f487a025f4a2f1f"},{"_id":"public/archives/2015/10/index.html","modified":1453428051265,"shasum":"88fd9cbaff5b46481b028646e0b3b1ade9dd657d"},{"_id":"public/archives/2016/index.html","modified":1453428051277,"shasum":"0c48e0e647625116ed9e62019d48a7cf47267396"},{"_id":"public/archives/2016/01/index.html","modified":1453428051295,"shasum":"b2ce7d80c7a72f60b0de3e5f83ada0424f5f3b05"},{"_id":"public/categories/EverydayLife/index.html","modified":1453428051303,"shasum":"9fd6bf46c89c808ed9a2533115720fbf5d5a32a4"},{"_id":"public/index.html","modified":1453428051331,"shasum":"bd91a9146c8cde7da25d6afd3b75b41419178ce7"},{"_id":"public/page/2/index.html","modified":1453428051345,"shasum":"289b9bb06771ff00735d3d84c2a91b17034f1adf"},{"_id":"public/search.xml","modified":1453427758051,"shasum":"584f4804e5a29b5dc70f24ec340e0757f95f1f1e"},{"_id":"public/tags/随笔/index.html","modified":1453428051357,"shasum":"4ffc943c67a9979ca47c5b5c5c9ca9119d967a1d"},{"_id":"public/tags/chemistry/index.html","modified":1453428051368,"shasum":"82cb15b9f368824ede04d2e474c6e43a5b92db34"},{"_id":"public/tags/Fortran/index.html","modified":1453428051378,"shasum":"7dc06772c7a8551fd796ce153629bdccbcea948c"},{"_id":"public/tags/VASP/index.html","modified":1453428051387,"shasum":"ce4690d4ee5d2711621c1f705a8b077529840fea"},{"_id":"public/tags/C/index.html","modified":1453428051400,"shasum":"6711b0e069b349bf68ebb41a374db2d6ac5798cf"},{"_id":"public/tags/Git/index.html","modified":1453428051413,"shasum":"5202b6ec374c5a7cdfdcbf6048ac2e80a5f1eea4"},{"_id":"public/tags/GitHub/index.html","modified":1453428051421,"shasum":"3bd9cce0754268eb678047a9c362581f87049967"},{"_id":"public/tags/Notes/index.html","modified":1453428051431,"shasum":"2153049bedbef6aa892262f6642eb47030e9486e"},{"_id":"public/tags/GilbertStrang/index.html","modified":1453428051444,"shasum":"3d088f1c0a40ff2a743a89f067d3c9c207568cc9"},{"_id":"public/tags/LinearAlgebra/index.html","modified":1453428051458,"shasum":"2f784da18a759d26c5fee82ee3645b8dc2ebfe85"},{"_id":"public/tags/catalysis/index.html","modified":1453428051470,"shasum":"760872a8f90d93721daad1f93f4522762f5d43da"},{"_id":"public/tags/kinetic-model/index.html","modified":1453428051481,"shasum":"8de08ede3b7407b83b4c02383181ed3eb7136e7c"},{"_id":"public/tags/kinetics/index.html","modified":1453428051495,"shasum":"5129c6e2ac05a35c39c277161eb06d32cd5fa927"},{"_id":"public/tags/python/index.html","modified":1453428051503,"shasum":"8d9da33121e87541dce4fb617f19676e937669ff"},{"_id":"public/tags/ecust/index.html","modified":1453428051514,"shasum":"e241c1c184a83e744104f92cb36fcda2fb497614"},{"_id":"public/tags/loggers/index.html","modified":1453428051523,"shasum":"ba8535326874e344bf7e2a6172523365e6df62e7"},{"_id":"public/tags/校园网/index.html","modified":1453428051537,"shasum":"05aefb809139c54d0b961efd8a1e5842fc0f0897"}],"Category":[{"name":"EverydayLife","_id":"cijp15n8o0013b8ie5uoavn1c"}],"Data":[],"Page":[{"title":"Tags","layout":"tags","_content":"","source":"tags/index.html","raw":"title: Tags\nlayout: tags\n---","date":"2016-01-22T01:05:23.538Z","updated":"2016-01-22T01:05:23.495Z","path":"tags/index.html","comments":1,"_id":"cijp15n500001b8iel7tc51rp"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.html","raw":"title: Categories\nlayout: categories\n---","date":"2016-01-22T01:03:40.333Z","updated":"2016-01-22T01:03:40.333Z","path":"categories/index.html","comments":1,"_id":"cijp15n590002b8ier3vkgluu"},{"title":"About Me","id":2,"comment":false,"date":"2015-02-07T23:47:43.000Z","_content":"\n**iPytLab** is the personal blog of Z.J.Shao \n(A beginner of programming & computational chemistry).\n\nAim to share my personal learning experience and thoughts \nabout programming and Computational Chemistry.\n\nEmail address: <[shaozhengjiang@gmail.com](mailto:shaozhengjiang@gmail.com)>\nWeibo: [@pytlab](http://weibo.com/shaowugui)\nZhihu: [@邵正将](http://www.zhihu.com/people/shao-zheng-jiang)","source":"about-me/index.md","raw":"---\ntitle: About Me\nid: 2\ncomment: false\ndate: 2015-02-08 07:47:43\n---\n\n**iPytLab** is the personal blog of Z.J.Shao \n(A beginner of programming & computational chemistry).\n\nAim to share my personal learning experience and thoughts \nabout programming and Computational Chemistry.\n\nEmail address: <[shaozhengjiang@gmail.com](mailto:shaozhengjiang@gmail.com)>\nWeibo: [@pytlab](http://weibo.com/shaowugui)\nZhihu: [@邵正将](http://www.zhihu.com/people/shao-zheng-jiang)","updated":"2016-01-21T13:24:00.797Z","path":"about-me/index.html","comments":1,"layout":"page","_id":"cijp15n5v0003b8ieigxvmjjb"},{"title":"About","layout":"page","_content":"\n喜欢写代码的，希望能靠自己代码发文章的，计算化学狗一只(ฅ´ω`ฅ) \n","source":"about/index.html","raw":"title: About\nlayout: page\n---\n\n喜欢写代码的，希望能靠自己代码发文章的，计算化学狗一只(ฅ´ω`ฅ) \n","date":"2016-01-22T01:41:52.394Z","updated":"2016-01-22T01:41:52.393Z","path":"about/index.html","comments":1,"_id":"cijp15n640004b8ie2pavqqpq"}],"Post":[{"title":"Hello World","date":"2015-02-08T08:29:36.000Z","_content":"\n这是我的博客新家，在这里和大家分享自己的学习过程中的经验和见解(ง •̀_•́)ง\n\n--PytLab\n","source":"_posts/2015-02-08-hello-world-2.md","raw":"---\ntitle: Hello World\ndate: 2015-02-08 16:29:36\ntags:\n---\n\n这是我的博客新家，在这里和大家分享自己的学习过程中的经验和见解(ง •̀_•́)ง\n\n--PytLab\n","slug":"hello-world-2","published":1,"updated":"2016-01-21T14:02:07.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n4l0000b8iewqkg802e"},{"title":"我的博客新家","date":"2016-01-21T11:41:37.000Z","_content":"\n由于自己买的空间感觉不稳定也不靠谱，于是用[Hexo](https://github.com/hexojs/hexo)把博客迁到GitHub Pages来了，这是我的博客新家。等有空会把[ipytlab.com](http://ipytlab.com)上的文章迁移到这里来。\n嘿嘿，先用不同语言打个招呼先，以后请多多关照ヽ(•̀ω•́ )ゝ\nps.很是喜欢用Markdown写博客啊，这代码块我也很是喜欢 (￣y▽￣)~*\n``` C\n// C \n#include <stdio.h>\n\nint main(void)\n{\n    printf(\"Hello Github Pages! -- zjshao\\n\");\n\n    return 0;\n}\n```\n\n``` Cpp\n// C plus plus\n#include <iostream>\n\nint main(void)\n{\n    std::cout << \"Hello Github Pages! -- zjshao\" << std::endl;\n\n    return 0;\n}\n```\n\n``` python\n# python\nprint \"Hello Github Pages. -- zjshao\"\n```\n\n``` Fortran\n! FORTRAN\nPROGRAM main\n  IMPLICIT NONE\n  WRITE(*, *) \"Hello Github Pages, --zjshao\"\nEND PROGRAM main\n```\n","source":"_posts/2016-01-21-我的博客新家.md","raw":"---\ntitle: 我的博客新家\ndate: 2016-01-21 19:41:37\ntags: 随笔\n---\n\n由于自己买的空间感觉不稳定也不靠谱，于是用[Hexo](https://github.com/hexojs/hexo)把博客迁到GitHub Pages来了，这是我的博客新家。等有空会把[ipytlab.com](http://ipytlab.com)上的文章迁移到这里来。\n嘿嘿，先用不同语言打个招呼先，以后请多多关照ヽ(•̀ω•́ )ゝ\nps.很是喜欢用Markdown写博客啊，这代码块我也很是喜欢 (￣y▽￣)~*\n``` C\n// C \n#include <stdio.h>\n\nint main(void)\n{\n    printf(\"Hello Github Pages! -- zjshao\\n\");\n\n    return 0;\n}\n```\n\n``` Cpp\n// C plus plus\n#include <iostream>\n\nint main(void)\n{\n    std::cout << \"Hello Github Pages! -- zjshao\" << std::endl;\n\n    return 0;\n}\n```\n\n``` python\n# python\nprint \"Hello Github Pages. -- zjshao\"\n```\n\n``` Fortran\n! FORTRAN\nPROGRAM main\n  IMPLICIT NONE\n  WRITE(*, *) \"Hello Github Pages, --zjshao\"\nEND PROGRAM main\n```\n","slug":"我的博客新家","published":1,"updated":"2016-01-21T12:20:32.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n6e0005b8ie7s4s7zro"},{"title":"华丽的昏割线","date":"2016-01-21T11:40:31.000Z","_content":"\n## --------------------------- 华丽的昏割线 -----------------------------\n#### 以下文章均为从以前wordpress迁移过来\n\n","source":"_posts/2016-01-21-华丽的昏割线.md","raw":"---\ntitle: 华丽的昏割线\ndate: 2016-01-21 19:40:31\ntags:\n---\n\n## --------------------------- 华丽的昏割线 -----------------------------\n#### 以下文章均为从以前wordpress迁移过来\n\n","slug":"华丽的昏割线","published":1,"updated":"2016-01-21T13:56:33.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n6q0008b8ieq7cqyyqs"},{"title":"开始看VASP源码","date":"2015-10-09T13:53:32.000Z","_content":"\n最近开始看VASP源码啦，心得什么的会写在这里，当然几十万行的VASP代码不可能全部都看，重点还是ionic relaxation的部分啦～come on！\n","source":"_posts/2015-10-09-开始看VASP源码.md","raw":"---\ntitle: 开始看VASP源码\ntags:\n  - chemistry\n  - Fortran\n  - VASP\ndate: 2015-10-09 21:53:32\n---\n\n最近开始看VASP源码啦，心得什么的会写在这里，当然几十万行的VASP代码不可能全部都看，重点还是ionic relaxation的部分啦～come on！\n","slug":"开始看VASP源码","published":1,"updated":"2016-01-21T14:01:23.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n6z0009b8ievqrze62z"},{"title":"Fortran数组初始化总结","date":"2015-09-03T07:13:08.000Z","_content":"\nfortran数组的初始化有些地方和C类似，有些地方由于Fortran有所谓隐含式循环数组初始化更加灵活。\n**初始化为相同的值**\n\nC:\n``` C\nint c[10] = {0};  /*这种方法只能全部初始化为0, 其他数字不行*/\n```\nFortran:\n``` Fortran\ninteger :: f(10) = 0\n!DATA\nINTEGER :: F(10)\nDATA F /10*0/\n```\n\n**全部初始化**\n\nC:\n``` C\nint c[5] = {1, 2, 3, 4, 5};\n```\nFortran:\n``` Fortran\ninteger :: f(5) = (/ 1, 2, 3, 4, 5 /)\n!DATA\nINTEGER :: F(5)\nDATA F /1, 2, 3, 4, 5/\n```\n\n下面是fortran的特色了，\n隐含式循环初始化\n\n``` Fortran\ninteger :: f(5) = (/ 1, (i, i=2, 4), 5 /)\n!初始化二维数组\ninteger :: f(2, 2)\ndata ((f(i, j), i=1,2), j=1,2) /1, 2, 3, 4/\n```\n","source":"_posts/2015-09-03-Fortran数组初始化总结.md","raw":"---\ntitle: Fortran数组初始化总结\ntags:\n  - C\n  - Fortran\ndate: 2015-09-03 15:13:08\n---\n\nfortran数组的初始化有些地方和C类似，有些地方由于Fortran有所谓隐含式循环数组初始化更加灵活。\n**初始化为相同的值**\n\nC:\n``` C\nint c[10] = {0};  /*这种方法只能全部初始化为0, 其他数字不行*/\n```\nFortran:\n``` Fortran\ninteger :: f(10) = 0\n!DATA\nINTEGER :: F(10)\nDATA F /10*0/\n```\n\n**全部初始化**\n\nC:\n``` C\nint c[5] = {1, 2, 3, 4, 5};\n```\nFortran:\n``` Fortran\ninteger :: f(5) = (/ 1, 2, 3, 4, 5 /)\n!DATA\nINTEGER :: F(5)\nDATA F /1, 2, 3, 4, 5/\n```\n\n下面是fortran的特色了，\n隐含式循环初始化\n\n``` Fortran\ninteger :: f(5) = (/ 1, (i, i=2, 4), 5 /)\n!初始化二维数组\ninteger :: f(2, 2)\ndata ((f(i, j), i=1,2), j=1,2) /1, 2, 3, 4/\n```\n","slug":"Fortran数组初始化总结","published":1,"updated":"2016-01-21T14:02:40.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n7c000gb8ie1sgnv7vx"},{"title":"关于Fortran和C数组的优先模式","date":"2015-09-01T01:34:59.000Z","_content":"\n熟悉了C语言和Python中的行优先模式，上手Fortran的列优先模式时候有点绕，大致在这整理下思路。\n无论对于C或者Fortran数据对象在内存中都是连续排列的。比如我初始化一个3×3的二维数组.\nC语言\n``` C\nint c[3][3] = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n```\n\nFortran\n``` Fortran\ninteger :: f(3, 3)\ninteger :: r, c\ndata ((m(r, c), r=1, 3), c=1, 3) /(i, i=1,9)/ ! 注意我这里是按照列进行初始化的\n```\n\n通过上面两种语言的初始化数组的方式，数据对象在内存中存放的方式都是\n`1|2|3|4|5|6|7|8|9`\n但是C和fortran对连续内存块进行随机存取时候的索引优先是不同的，C是按照行优先，也就是stride等于1，上述数据对象的分别为：\n```\nc[0][0], c[0][1], c[0][2], c[1][0], c[1][1], c[1][2], c[2][0], c[2][1], c[2][2]\n```\nFortran是列优先, stride等于3，上述对象分别为:\n```\nf(1, 1), f(2, 1), f(3, 1), f(1, 2), f(2, 2), f(3, 2), f(1, 3), f(2, 3), f(3, 3)\n```\n对于经常使用的话，我觉得直接按照线性代数里面最直观的列向量来处理就行，估计Fortran在设计的时候也是科学家们方便操作列向量才这么设计的。\n\nFortran数组输出时的注意,\n`write(*, *)` f进行输出时，是直接按照内存顺序输出的，也就是一列一列输出，但是看起来是一行一行的。\n例如,\n\n``` Fortran\nprogram ex0714\n    implicit none\n    integer :: i, j\n    integer, parameter :: size = 5\n    integer :: m(size, size)\n\n    forall(i = 1:size, j = 1:size, i < j) m(i, j) = 1\n    forall(i = 1:size, j = 1:size, i == j) m(i, j) = 2\n    forall(i = 1:size, j = 1:size, i > j) m(i, j) = 3\n\n    write(*, \"(5(5I5, /))\") m\n    stop\nend program ex0714\n```\n输出就为\n\n```\n    2    3    3    3    3\n    1    2    3    3    3\n    1    1    2    3    3\n    1    1    1    2    3\n    1    1    1    1    2\n```\n和我本意不同，所以要按照我的顺序输出就应该改一下输出顺序\n\n```\nwrite(*, \"(5(5I5, /))\") ((m(i, j), j=1, size), i=1, size)\n```\n输出：\n```\n    2    1    1    1    1\n    3    2    1    1    1\n    3    3    2    1    1\n    3    3    3    2    1\n    3    3    3    3    2\n```\n以上\n","source":"_posts/2015-09-01-关于Fortran和C数组的优先模式.md","raw":"---\ntitle: 关于Fortran和C数组的优先模式\ntags:\n  - C\n  - Fortran\ndate: 2015-09-01 09:34:59\n---\n\n熟悉了C语言和Python中的行优先模式，上手Fortran的列优先模式时候有点绕，大致在这整理下思路。\n无论对于C或者Fortran数据对象在内存中都是连续排列的。比如我初始化一个3×3的二维数组.\nC语言\n``` C\nint c[3][3] = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n```\n\nFortran\n``` Fortran\ninteger :: f(3, 3)\ninteger :: r, c\ndata ((m(r, c), r=1, 3), c=1, 3) /(i, i=1,9)/ ! 注意我这里是按照列进行初始化的\n```\n\n通过上面两种语言的初始化数组的方式，数据对象在内存中存放的方式都是\n`1|2|3|4|5|6|7|8|9`\n但是C和fortran对连续内存块进行随机存取时候的索引优先是不同的，C是按照行优先，也就是stride等于1，上述数据对象的分别为：\n```\nc[0][0], c[0][1], c[0][2], c[1][0], c[1][1], c[1][2], c[2][0], c[2][1], c[2][2]\n```\nFortran是列优先, stride等于3，上述对象分别为:\n```\nf(1, 1), f(2, 1), f(3, 1), f(1, 2), f(2, 2), f(3, 2), f(1, 3), f(2, 3), f(3, 3)\n```\n对于经常使用的话，我觉得直接按照线性代数里面最直观的列向量来处理就行，估计Fortran在设计的时候也是科学家们方便操作列向量才这么设计的。\n\nFortran数组输出时的注意,\n`write(*, *)` f进行输出时，是直接按照内存顺序输出的，也就是一列一列输出，但是看起来是一行一行的。\n例如,\n\n``` Fortran\nprogram ex0714\n    implicit none\n    integer :: i, j\n    integer, parameter :: size = 5\n    integer :: m(size, size)\n\n    forall(i = 1:size, j = 1:size, i < j) m(i, j) = 1\n    forall(i = 1:size, j = 1:size, i == j) m(i, j) = 2\n    forall(i = 1:size, j = 1:size, i > j) m(i, j) = 3\n\n    write(*, \"(5(5I5, /))\") m\n    stop\nend program ex0714\n```\n输出就为\n\n```\n    2    3    3    3    3\n    1    2    3    3    3\n    1    1    2    3    3\n    1    1    1    2    3\n    1    1    1    1    2\n```\n和我本意不同，所以要按照我的顺序输出就应该改一下输出顺序\n\n```\nwrite(*, \"(5(5I5, /))\") ((m(i, j), j=1, size), i=1, size)\n```\n输出：\n```\n    2    1    1    1    1\n    3    2    1    1    1\n    3    3    2    1    1\n    3    3    3    2    1\n    3    3    3    3    2\n```\n以上\n","slug":"关于Fortran和C数组的优先模式","published":1,"updated":"2016-01-21T14:03:13.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n7j000kb8ie2o86tuny"},{"title":"git push的时候用ssh放弃https","date":"2015-08-29T01:23:35.000Z","_content":"\n这几天改以前的代码，每次git push到github的时候总是提醒我输入我输入github的用户名和密码，很是麻烦。\n于是找到了原因，之前我的代码是通过https clone到本地的，如果一开始是通过git ssh克隆就不会出现这种问题。如果已经通过https克隆，不用着急可以修改。\n\n在你的版本库.git中打开config文件会有如下一段代码:\n```\n[remote \"origin\"]  \nfetch = + refs/heads/*:refs/remotes/origin/*  \nurl = https://username@github.com/username/projectname.git \n```\nurl改成相应的\n```\n[remote \"origin\"]  \nfetch = + refs/heads/*:refs/remotes/origin/*  \nurl = git@github.com:username/projectname.git \n```\n这样就可以通过ssh公钥的方式认证进行git push啦\n","source":"_posts/2015-08-29-git-push的时候用ssh放弃https.md","raw":"---\ntitle: git push的时候用ssh放弃https\ntags:\n  - Git\n  - GitHub\ndate: 2015-08-29 09:23:35\n---\n\n这几天改以前的代码，每次git push到github的时候总是提醒我输入我输入github的用户名和密码，很是麻烦。\n于是找到了原因，之前我的代码是通过https clone到本地的，如果一开始是通过git ssh克隆就不会出现这种问题。如果已经通过https克隆，不用着急可以修改。\n\n在你的版本库.git中打开config文件会有如下一段代码:\n```\n[remote \"origin\"]  \nfetch = + refs/heads/*:refs/remotes/origin/*  \nurl = https://username@github.com/username/projectname.git \n```\nurl改成相应的\n```\n[remote \"origin\"]  \nfetch = + refs/heads/*:refs/remotes/origin/*  \nurl = git@github.com:username/projectname.git \n```\n这样就可以通过ssh公钥的方式认证进行git push啦\n","slug":"git-push的时候用ssh放弃https","published":1,"updated":"2016-01-21T14:02:33.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n7r000nb8ieloyrss3u"},{"title":"具有局部作用域的变量是否可以在作用域外使用?","date":"2015-08-22T12:03:10.000Z","_content":"\n昨天在操作链表的时候看到书上写了一段释放链表内存的代码，感觉奇奇怪怪的。\n\n``` C\ncurrent = head;\nwhile(current != NULL)\n{\n    free(current);\n    current = current->next;\n}\n```\n\n上面的代码就是在释放了current指向的内存之后仍然使用了该内存的数据。感觉好奇怪，不知道是作者的原因还是什么。\n应该这样写才对：\n``` C\ncurrent = head;\nwhile(current != NULL)\n{\n    tmp = current->next;\n    free(current);\n    current = tmp;\n}\n```\n\n不然`free()`可能使当前节点的内容不再可用。\n后面我在stackoverflow上看到一个[回答](http://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794)，比喻的很好：\n> 你在某个酒店订了一个房，你入住的时候，你放了一本书在这个酒店的抽屉里，但是你走的时候，你忘了这本书。而且，你还没有把这个房间的钥匙还回去。于是，你在未来某个时候，偷偷地回来，打开这个房间的门，你看到了你的书还在里间。当然，还还可以放回别的书。因为，这个酒店管理不会在你走的时候把你留下的书清走，而且，这个酒店的管理的安保措施不是那么严格，因为他信任每一个客人都会遵守管理条例。\r> \n> \n> 在这种情况下，如果你幸运的话，书还会在那里，也可能你的书已经没了。也有可能当你回去的时候，有一个人在那里正在撕你的书，或者酒店把那个抽屉都挪走并变成衣柜，或是整个酒店正在被拆除以改成了一个足球场，而你偷偷摸摸进到施工现场的时候被炸死。\n也就是说即使我释放了当前指针指向的内存，我也可以通过同样的指针访问该部分内容，但是内容就没有保障了，所谓some random memory area。这就好像我和系统之间的一个协议，我不会偷着回来我的房间，但是我的确偷偷的这么做了，也就是没有履行协议。\n后面有个高票的回答也很好：\n\n> What you're doing here is simply reading and writing to memory that used to be the address of a. Now that you're outside of foo, it's just a pointer to some random memory area. It just so happens that in your example, that memory area does exist and nothing else is using it at the moment. You don't break anything by continuing to use it, and nothing else has overwritten it yet. Therefore, the 5 is still there. In a real program, that memory would be re-used almost immediately and you'd break something by doing this (though the symptoms may not appear until much later!)\r> \n> \n> When you return from foo, you tell the OS that you're no longer using that memory and it can be reassigned to something else. If you're lucky and it never does get reassigned, and the OS doesn't catch you using it again, then you'll get away with the lie. Chances are though you'll end up writing over whatever else ends up with that address.\r> \n> \n> Now if you're wondering why the compiler doesn't complain, it's probably because foo got eliminated by optimization. It usually will warn you about this sort of thing. C assumes you know what you're doing though, and technically you haven't violated scope here (there's no reference to a itself outside of foo), only memory access rules, which only triggers a warning rather than an error.\r> \n> **In short: this won't usually work, but sometimes will by chance.**\n","source":"_posts/2015-08-22-具有局部作用域的变量是否可以在作用域外使用.md","raw":"---\ntitle: 具有局部作用域的变量是否可以在作用域外使用?\ntags:\n  - C\ndate: 2015-08-22 20:03:10\n---\n\n昨天在操作链表的时候看到书上写了一段释放链表内存的代码，感觉奇奇怪怪的。\n\n``` C\ncurrent = head;\nwhile(current != NULL)\n{\n    free(current);\n    current = current->next;\n}\n```\n\n上面的代码就是在释放了current指向的内存之后仍然使用了该内存的数据。感觉好奇怪，不知道是作者的原因还是什么。\n应该这样写才对：\n``` C\ncurrent = head;\nwhile(current != NULL)\n{\n    tmp = current->next;\n    free(current);\n    current = tmp;\n}\n```\n\n不然`free()`可能使当前节点的内容不再可用。\n后面我在stackoverflow上看到一个[回答](http://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794)，比喻的很好：\n> 你在某个酒店订了一个房，你入住的时候，你放了一本书在这个酒店的抽屉里，但是你走的时候，你忘了这本书。而且，你还没有把这个房间的钥匙还回去。于是，你在未来某个时候，偷偷地回来，打开这个房间的门，你看到了你的书还在里间。当然，还还可以放回别的书。因为，这个酒店管理不会在你走的时候把你留下的书清走，而且，这个酒店的管理的安保措施不是那么严格，因为他信任每一个客人都会遵守管理条例。\r> \n> \n> 在这种情况下，如果你幸运的话，书还会在那里，也可能你的书已经没了。也有可能当你回去的时候，有一个人在那里正在撕你的书，或者酒店把那个抽屉都挪走并变成衣柜，或是整个酒店正在被拆除以改成了一个足球场，而你偷偷摸摸进到施工现场的时候被炸死。\n也就是说即使我释放了当前指针指向的内存，我也可以通过同样的指针访问该部分内容，但是内容就没有保障了，所谓some random memory area。这就好像我和系统之间的一个协议，我不会偷着回来我的房间，但是我的确偷偷的这么做了，也就是没有履行协议。\n后面有个高票的回答也很好：\n\n> What you're doing here is simply reading and writing to memory that used to be the address of a. Now that you're outside of foo, it's just a pointer to some random memory area. It just so happens that in your example, that memory area does exist and nothing else is using it at the moment. You don't break anything by continuing to use it, and nothing else has overwritten it yet. Therefore, the 5 is still there. In a real program, that memory would be re-used almost immediately and you'd break something by doing this (though the symptoms may not appear until much later!)\r> \n> \n> When you return from foo, you tell the OS that you're no longer using that memory and it can be reassigned to something else. If you're lucky and it never does get reassigned, and the OS doesn't catch you using it again, then you'll get away with the lie. Chances are though you'll end up writing over whatever else ends up with that address.\r> \n> \n> Now if you're wondering why the compiler doesn't complain, it's probably because foo got eliminated by optimization. It usually will warn you about this sort of thing. C assumes you know what you're doing though, and technically you haven't violated scope here (there's no reference to a itself outside of foo), only memory access rules, which only triggers a warning rather than an error.\r> \n> **In short: this won't usually work, but sometimes will by chance.**\n","slug":"具有局部作用域的变量是否可以在作用域外使用","published":1,"updated":"2016-01-21T14:02:18.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n7y000sb8ied9fm1qb4"},{"title":"C NOTE -- 数组初始化总结","date":"2015-08-17T02:44:19.000Z","_content":"\n今天给结构数组初始化的时候发现也能指定初始化项目列表。于是试了试int数组也可以，在这里把这几种常用的数组初始化方法总结下。\n``` C\n#include <stdio.h>\nvoid putarr(int *);\n\nint main(void)\n{\n    /*不同方法初始化*/\n    int a[] = {0, 1, 2, 3, 4};\n    putarr(a);\n    int b[5] = {2};\n    putarr(b);\n    int c[5] = { [2] = 2 }; /*指定初始化项目*/\n    putarr(c);\n    int d[5] = {0, 1, 2};\n    putarr(d);\n    return 0;\n}\n\nvoid putarr(int * arr)\n{\n    int i;\n    for(i = 0; i < 5; i++)\n        printf(\"%d \", arr[i]);\n    putchar('\\n');\n}\n```\n\n输出：\n<pre>\n0 1 2 3 4\n2 0 0 0 0\n0 0 2 0 0\n0 1 2 0 0\n</pre>\n","source":"_posts/2015-08-17-C-NOTE--数组初始化总结.md","raw":"---\ntitle: C NOTE -- 数组初始化总结\ndate: 2015-08-17 10:44:19\ntags:\n---\n\n今天给结构数组初始化的时候发现也能指定初始化项目列表。于是试了试int数组也可以，在这里把这几种常用的数组初始化方法总结下。\n``` C\n#include <stdio.h>\nvoid putarr(int *);\n\nint main(void)\n{\n    /*不同方法初始化*/\n    int a[] = {0, 1, 2, 3, 4};\n    putarr(a);\n    int b[5] = {2};\n    putarr(b);\n    int c[5] = { [2] = 2 }; /*指定初始化项目*/\n    putarr(c);\n    int d[5] = {0, 1, 2};\n    putarr(d);\n    return 0;\n}\n\nvoid putarr(int * arr)\n{\n    int i;\n    for(i = 0; i < 5; i++)\n        printf(\"%d \", arr[i]);\n    putchar('\\n');\n}\n```\n\n输出：\n<pre>\n0 1 2 3 4\n2 0 0 0 0\n0 0 2 0 0\n0 1 2 0 0\n</pre>\n","slug":"C-NOTE--数组初始化总结","published":1,"updated":"2016-01-21T14:05:00.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n82000ub8iea454qnnr"},{"title":"C NOTE - 关于逻辑运算符","date":"2015-08-14T05:29:45.000Z","_content":"\n昨天写了个c语言处理文件的练习题，题目是：\n\n> 编写一个代开两个文件的程序。可以使用命令行参数或者请求用户输入来获取文件名。让程序打印第一个文件的第一行，第二个文件的第二行，第一个文件第一行，第二个文件第二行。。。以此类推，知道打印完行数较多的文件的最后一行。\n\n程序很短很好写，但是在写程序的过程中我是通过逻辑或来判断是否两个文件都读完。\n``` C\n    while(fgets(line1, SLEN, fp1) != NULL || fgets(line2, SLEN, fp2) != NULL)\n    {...}\n```\n可是这样输出的结果是先打印了第一个文件的所有行然后是第二个文件的所有行。\n后来想了想，之所以出现这样的结果，有可能是逻辑运算符如果第一个条件满足后就不会运算`||`后面的表达式了。\n于是我把代码改成如下:\n``` C\n    pt1 = fgets(line1, SLEN, fp1);\n    pt2 = fgets(line2, SLEN, fp2);\n    while(pt1 || pt2)\n    {\n        fputs(line1, stdout);\n        fputs(line2, stdout);\n        pt1 = fgets(line1, SLEN, fp1);\n        pt2 = fgets(line2, SLEN, fp2);\n    }\n```\n果然是猜测的原因，以后用或运算符的时候要注意这里了。\n以上。\n","source":"_posts/2015-08-14-关于逻辑运算符.md","raw":"---\ntitle: C NOTE - 关于逻辑运算符\ntags:\n  - C\n  - Notes\ndate: 2015-08-14 13:29:45\n---\n\n昨天写了个c语言处理文件的练习题，题目是：\n\n> 编写一个代开两个文件的程序。可以使用命令行参数或者请求用户输入来获取文件名。让程序打印第一个文件的第一行，第二个文件的第二行，第一个文件第一行，第二个文件第二行。。。以此类推，知道打印完行数较多的文件的最后一行。\n\n程序很短很好写，但是在写程序的过程中我是通过逻辑或来判断是否两个文件都读完。\n``` C\n    while(fgets(line1, SLEN, fp1) != NULL || fgets(line2, SLEN, fp2) != NULL)\n    {...}\n```\n可是这样输出的结果是先打印了第一个文件的所有行然后是第二个文件的所有行。\n后来想了想，之所以出现这样的结果，有可能是逻辑运算符如果第一个条件满足后就不会运算`||`后面的表达式了。\n于是我把代码改成如下:\n``` C\n    pt1 = fgets(line1, SLEN, fp1);\n    pt2 = fgets(line2, SLEN, fp2);\n    while(pt1 || pt2)\n    {\n        fputs(line1, stdout);\n        fputs(line2, stdout);\n        pt1 = fgets(line1, SLEN, fp1);\n        pt2 = fgets(line2, SLEN, fp2);\n    }\n```\n果然是猜测的原因，以后用或运算符的时候要注意这里了。\n以上。\n","slug":"关于逻辑运算符","published":1,"updated":"2016-01-21T14:06:20.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n88000vb8iewks4yf4s"},{"title":"VASPy一个面向对象的VASP文件处理库","id":"411","_content":"\n放假在家可以写写以前的想法，把vasp中的文件写成python对象，这样既系统有方便写脚本。就在github上开了个repo，目前写了几个文件的class,其中包含处理MaterialStudio的xsd类xml文件的类。不断更新,欢迎使用vasp的小伙伴们star,fork贡献出自己的一份力。\n库链接：[<ins datetime=\"2015-08-12T06:17:43+00:00\">Processing VASP files with Python - VASPy</ins>](https://github.com/PytLab/VASPy)\n","source":"_posts/2015-08-12-VASPy一个面向对象的VASP文件处理库.md","raw":"---\ntitle: VASPy一个面向对象的VASP文件处理库\nid: 411\ntags:\n  -VASP\n---\n\n放假在家可以写写以前的想法，把vasp中的文件写成python对象，这样既系统有方便写脚本。就在github上开了个repo，目前写了几个文件的class,其中包含处理MaterialStudio的xsd类xml文件的类。不断更新,欢迎使用vasp的小伙伴们star,fork贡献出自己的一份力。\n库链接：[<ins datetime=\"2015-08-12T06:17:43+00:00\">Processing VASP files with Python - VASPy</ins>](https://github.com/PytLab/VASPy)\n","slug":"VASPy一个面向对象的VASP文件处理库","published":1,"date":"2015-08-11T16:00:00.000Z","updated":"2016-01-21T15:32:02.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n8h000zb8ie5goudj93"},{"title":"有共鸣啦","id":"392","date":"2015-06-14T14:30:16.000Z","_content":"\n今天看Gilbert Strang的公开课，他提到了矩阵的应用中说了化学，\n这种方法在我之前写kinetic模型的时候就用了，核心代码很少，就能把一连串基元反应配平并合并了哈哈哈。\n来来来，上code(主要代码)：\n``` python\n    def null(A, eps=1e-10):\n        \"get null space of transposition of site_matrix\"\n         u, s, vh = np.linalg.svd(A, full_matrices=1, compute_uv=1)\n         null_space = np.compress(s <= eps, vh, axis=0)\n         return null_space.T\n     x = null(site_matrix.T)  # basis of null space\n     if not x.any():  # x is not empty\n         raise ValueError('Failed to get basis of nullspace.')\n     x = map(abs, x.T.tolist()[0])\n```\n","source":"_posts/2015-06-14-有共鸣啦.md","raw":"---\ntitle: 有共鸣啦\ntags:\n  - GilbertStrang\n  - LinearAlgebra\nid: 392\ncategories:\n  - EverydayLife\ndate: 2015-06-14 22:30:16\n---\n\n今天看Gilbert Strang的公开课，他提到了矩阵的应用中说了化学，\n这种方法在我之前写kinetic模型的时候就用了，核心代码很少，就能把一连串基元反应配平并合并了哈哈哈。\n来来来，上code(主要代码)：\n``` python\n    def null(A, eps=1e-10):\n        \"get null space of transposition of site_matrix\"\n         u, s, vh = np.linalg.svd(A, full_matrices=1, compute_uv=1)\n         null_space = np.compress(s <= eps, vh, axis=0)\n         return null_space.T\n     x = null(site_matrix.T)  # basis of null space\n     if not x.any():  # x is not empty\n         raise ValueError('Failed to get basis of nullspace.')\n     x = map(abs, x.T.tolist()[0])\n```\n","slug":"有共鸣啦","published":1,"updated":"2016-01-21T14:10:30.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n8m0012b8iepmb68ylg"},{"title":"动力学模型已兼容相对能量的输入文件","date":"2015-06-14T14:10:43.000Z","_content":"\n之前的动力学代码的数据文件我是在catmap的基础上进行改进，写了个tablemaker来生成一个csv文件，然后让要计算动力学的人把每个需要的物种的绝对能量输入到表格中，模型会在处理数据的时候自动计算其所有基元反应的能垒以及反应能量变化。之所有这样进行能量输入，是方便在后面能够基于每个物种的能量进行计算，比如在做出是猜测的时候进行Boltzmann分布，在进行敏感度分析时候能够针对每个中间态和过渡态进行分析。\n但是之前有一次帮师姐计算它的反应，他只有相对能量。如下，\n反应：\n``` MatLab\n% 反应\nO2 + # <-> O2#\nNO + O2# <-> ONOO#\nONOO# <-> NO2#\nO# + NO <-> NO2#\nNO2# <-> # + NO2\n\n% 能量\nEa = [0.63 0.65 0.22 0.65 0];\nG0 = [0.368 -0.455 -1.13 -0.49 -0.19];\n```\n\n于是我就在纸上手动算出来每个物种的所谓'generalized formation energy'。当然首先把O2、N0以及#的能量为0，然后根据相对能量的关系列出来线性方程组，通过矩阵乘法一步计算出所有其他物种的形成能。(顺便在这里吐槽下，所谓generalized formation energy通过这样的方法也能得到，感觉是个很虚的概念诶～)。得到矩阵的具体方法就是下得到一个coefficients matrix，m是从能量数据中得到的等式数，n是除去能量为0的物种以外其他所有物种。贴上获取矩阵的代码：\n``` python\n    def get_unknown_coeff_vector(self, elementary_rxn_list):\n        \"\"\"\n        Expect a elementary_rxn_list,\n        e.g. [['O2_s', 'NO_g'], ['*_s', 'ON-OO_s'], ['*_s', 'ONOO_s']]\n        return coefficient vectors, Ea, G0.\n        e.g. ([[0, 0, -1, 0, 0, 0, 0, 0, 1], [0, 0, -1, 1, 0, 0, 0, 0, 0]], 0.655, -0.455)\n        \"\"\"\n        idx = self._owner.elementary_rxns_list.index(elementary_rxn_list)\n        Ea, G0 = self.Ea[idx], self.G0[idx]\n\n        if not hasattr(self, 'unknowns'):\n            self.get_unknown_species()\n\n        coeff_vects = []\n        if Ea != 0 and len(elementary_rxn_list) != 2:  # has barrier\n            #get ts coefficient vector\n            is_list, ts_list = elementary_rxn_list[0], elementary_rxn_list[1]\n            is_dict, ts_dict = self.list2dict(is_list), self.list2dict(ts_list)\n            coeff_vect = []\n            for unknown in self.unknowns:\n                if unknown in is_dict:\n                    coeff = -is_dict[unknown]\n                elif unknown in ts_dict:\n                    coeff = ts_dict[unknown]\n                else:\n                    coeff = 0\n                coeff_vect.append(coeff)\n            coeff_vects.append(coeff_vect)\n\n        #coefficient vector for G0\n        is_list, fs_list = elementary_rxn_list[0], elementary_rxn_list[-1]\n        is_dict, fs_dict = self.list2dict(is_list), self.list2dict(fs_list)\n        coeff_vect = []\n        for unknown in self.unknowns:\n            if unknown in is_dict:\n                coeff = -is_dict[unknown]\n            elif unknown in fs_dict:\n                coeff = fs_dict[unknown]\n            else:\n                coeff = 0\n            coeff_vect.append(coeff)\n        coeff_vects.append(coeff_vect)\n\n        if Ea:\n            return coeff_vects, [Ea, G0]\n        else:\n            return coeff_vects, [G0]\n```\n后面的处理就是修改了下parser里面的parse_data()方法，将上面计算得到的形成能解析到动力学模型中。\n对应于csv_parser，新的rel_energy_parser中也有相应的parse_data()方法来读取能量数据，\n``` python\n    def parse_data(self):  # correspond with parse_data() in csv_parser.py\n        \"\"\"\n        Solve Axb equation to get value of generalized free energies.\n        \"\"\"\n        A, b = [], []\n        for rxn_list in self._owner.elementary_rxns_list:\n            coeff_vects, value = self.get_unknown_coeff_vector(rxn_list)\n            A.extend(coeff_vects)\n            b.extend(value)\n\n        A, b = np.matrix(A), np.matrix(b).reshape(-1, 1)\n        x = A.I*b  # values for unknowns\n\n        #convert column vector to list\n        x = x.reshape(1, -1).tolist()[0]\n\n        #put values to G_dict\n        for sp_name, G in zip(self.unknowns, x):\n            self.G_dict.setdefault(sp_name, G)\n\n        #put generalized formation energy into species_definition\n        for sp_name in self.G_dict:\n            sp_dict = self._owner.species_definitions\n            sp_dict[sp_name].setdefault('formation_energy', self.G_dict[sp_name])\n\n        setattr(self._owner, 'hasdata', True)\n\n        return\n\n```\n为此我又专门写了一个能够读取相对能量数据并计算动力学模型的运行脚本run_relative.py\n能量数据放在一个.py结尾的文件中，形如\n![](http://ipytlab.com/wp-content/uploads/2015/06/QQ截图20150614221151.gif)\n","source":"_posts/2015-06-14-动力学模型已兼容相对能量的输入文件.md","raw":"---\ntitle: 动力学模型已兼容相对能量的输入文件\ntags:\n  - catalysis\n  - chemistry\n  - kinetic model\n  - kinetics\n  - python\ndate: 2015-06-14 22:10:43\n---\n\n之前的动力学代码的数据文件我是在catmap的基础上进行改进，写了个tablemaker来生成一个csv文件，然后让要计算动力学的人把每个需要的物种的绝对能量输入到表格中，模型会在处理数据的时候自动计算其所有基元反应的能垒以及反应能量变化。之所有这样进行能量输入，是方便在后面能够基于每个物种的能量进行计算，比如在做出是猜测的时候进行Boltzmann分布，在进行敏感度分析时候能够针对每个中间态和过渡态进行分析。\n但是之前有一次帮师姐计算它的反应，他只有相对能量。如下，\n反应：\n``` MatLab\n% 反应\nO2 + # <-> O2#\nNO + O2# <-> ONOO#\nONOO# <-> NO2#\nO# + NO <-> NO2#\nNO2# <-> # + NO2\n\n% 能量\nEa = [0.63 0.65 0.22 0.65 0];\nG0 = [0.368 -0.455 -1.13 -0.49 -0.19];\n```\n\n于是我就在纸上手动算出来每个物种的所谓'generalized formation energy'。当然首先把O2、N0以及#的能量为0，然后根据相对能量的关系列出来线性方程组，通过矩阵乘法一步计算出所有其他物种的形成能。(顺便在这里吐槽下，所谓generalized formation energy通过这样的方法也能得到，感觉是个很虚的概念诶～)。得到矩阵的具体方法就是下得到一个coefficients matrix，m是从能量数据中得到的等式数，n是除去能量为0的物种以外其他所有物种。贴上获取矩阵的代码：\n``` python\n    def get_unknown_coeff_vector(self, elementary_rxn_list):\n        \"\"\"\n        Expect a elementary_rxn_list,\n        e.g. [['O2_s', 'NO_g'], ['*_s', 'ON-OO_s'], ['*_s', 'ONOO_s']]\n        return coefficient vectors, Ea, G0.\n        e.g. ([[0, 0, -1, 0, 0, 0, 0, 0, 1], [0, 0, -1, 1, 0, 0, 0, 0, 0]], 0.655, -0.455)\n        \"\"\"\n        idx = self._owner.elementary_rxns_list.index(elementary_rxn_list)\n        Ea, G0 = self.Ea[idx], self.G0[idx]\n\n        if not hasattr(self, 'unknowns'):\n            self.get_unknown_species()\n\n        coeff_vects = []\n        if Ea != 0 and len(elementary_rxn_list) != 2:  # has barrier\n            #get ts coefficient vector\n            is_list, ts_list = elementary_rxn_list[0], elementary_rxn_list[1]\n            is_dict, ts_dict = self.list2dict(is_list), self.list2dict(ts_list)\n            coeff_vect = []\n            for unknown in self.unknowns:\n                if unknown in is_dict:\n                    coeff = -is_dict[unknown]\n                elif unknown in ts_dict:\n                    coeff = ts_dict[unknown]\n                else:\n                    coeff = 0\n                coeff_vect.append(coeff)\n            coeff_vects.append(coeff_vect)\n\n        #coefficient vector for G0\n        is_list, fs_list = elementary_rxn_list[0], elementary_rxn_list[-1]\n        is_dict, fs_dict = self.list2dict(is_list), self.list2dict(fs_list)\n        coeff_vect = []\n        for unknown in self.unknowns:\n            if unknown in is_dict:\n                coeff = -is_dict[unknown]\n            elif unknown in fs_dict:\n                coeff = fs_dict[unknown]\n            else:\n                coeff = 0\n            coeff_vect.append(coeff)\n        coeff_vects.append(coeff_vect)\n\n        if Ea:\n            return coeff_vects, [Ea, G0]\n        else:\n            return coeff_vects, [G0]\n```\n后面的处理就是修改了下parser里面的parse_data()方法，将上面计算得到的形成能解析到动力学模型中。\n对应于csv_parser，新的rel_energy_parser中也有相应的parse_data()方法来读取能量数据，\n``` python\n    def parse_data(self):  # correspond with parse_data() in csv_parser.py\n        \"\"\"\n        Solve Axb equation to get value of generalized free energies.\n        \"\"\"\n        A, b = [], []\n        for rxn_list in self._owner.elementary_rxns_list:\n            coeff_vects, value = self.get_unknown_coeff_vector(rxn_list)\n            A.extend(coeff_vects)\n            b.extend(value)\n\n        A, b = np.matrix(A), np.matrix(b).reshape(-1, 1)\n        x = A.I*b  # values for unknowns\n\n        #convert column vector to list\n        x = x.reshape(1, -1).tolist()[0]\n\n        #put values to G_dict\n        for sp_name, G in zip(self.unknowns, x):\n            self.G_dict.setdefault(sp_name, G)\n\n        #put generalized formation energy into species_definition\n        for sp_name in self.G_dict:\n            sp_dict = self._owner.species_definitions\n            sp_dict[sp_name].setdefault('formation_energy', self.G_dict[sp_name])\n\n        setattr(self._owner, 'hasdata', True)\n\n        return\n\n```\n为此我又专门写了一个能够读取相对能量数据并计算动力学模型的运行脚本run_relative.py\n能量数据放在一个.py结尾的文件中，形如\n![](http://ipytlab.com/wp-content/uploads/2015/06/QQ截图20150614221151.gif)\n","slug":"动力学模型已兼容相对能量的输入文件","published":1,"updated":"2016-01-21T14:17:08.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n8v0019b8ieesjtsceo"},{"title":"自动登陆华理校园网的python脚本","date":"2015-02-08T15:43:36.000Z","_content":"\n前段时间实验室的校园网总是被挤掉，虽然没用python写过爬虫，但是这也是契机来学习一下标准库里的`urllib,      urllib2, cookielib`等这些类似的Lib.于是就着手开始写了个自动检测网络连接，并自动连接校园网的python脚本([loggers|GitHub](https://github.com/PytLab/loggers \"loggers\"))，便于以后进行扩  展，分别写了两个类, 一个`class LoggerBase`, 一个子类`class EcustLogger(LoggerBase)`其中的代码风格模仿了这学期看的一个叫[CatMap|GitHub](https://github.com/ajmedford/catmap \"catmap\")的`Micro Kinetic Model`的风格，从其中学习了利用字典数据类型进行脚本日志的生成等， 例如\n\t**日志记录**\n\n``` python\ndef log(self, event, **kwargs):\n    \"append log info into log file\"\n    file_obj = open(self.log_file,'a')\n    #append new log infomation\n    message_template = Template(self._log_str[event])\n    message = message_template.substitute(kwargs)\n    append_ctnt = self._log_format % (message, '['+time.ctime()+']')\n    file_obj.write(append_ctnt)\n    file_obj.close()\n```\n其中日志的`log_str`如下：\n``` python\nself._log_str = {\n\t'match_file_fail' : 'No file link in \\'${url}\\'',\n\t'suffix_unmatch:' : ('Warning: unmatched suffix : \\'${suffix_1}\\' and '\n\t\t\t       '\\'${suffix_2}\\'\t,force to change to \\'${suffix_2}\\''),\n\t'illegal_path'    : 'illegal_path : ${illegal_path}',\n\t'download_fail'   : '${filename} download overtime',\n\t'download_times'  : '${filename} download time:${times} ',\n\t'download_time'   : '${filename} download time used : ${time_pass}s '\n\t}\n```\n这种生成日志的原理就是利用dict存固定格式的log语句，然后利用`re`模块的`substitute`方法替换其中的可变的字符串，然后写个`log()`方法吧字符串append到日志文件中。\n\n脚本原理还是很简单的，就是不断的想处理表单的程序发送请求，获取返回信息。由于本人对于网站的学习只学习了一点点皮毛，看到学校的校园网登陆的html代码发现处理表单的是一个cgi脚本，不是我以前写网站的时候直接用一个php页面来处理(这里我不是太懂，望轻喷)。\n**主要登陆的方法：**\n\n``` python\ndef do_login(self):\n    #set cookie\n    cj = cookielib.CookieJar()\n\n    url_login = self.url_login\n    form_data = self.form_data_dict\n        try:\n            opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\n            urllib2.install_opener(opener)\n            req=urllib2.Request(url_login,urllib.urlencode(form_data))\n            u=urllib2.urlopen(req)\n            return u.read().decode('utf-8').encode('gbk')\n        except:\n            print \"Ooops! Failed to log in !>_< there may be a problem.\"\n            return\n```\n首先先设置cookie，获取表单信息，向表单处理cgi发送request，华理的表单处理cgi在 http://172.20.13.100/cgi-bin/srun_portal 上。最后用`urllib2.urlopen()`抓取页面信息，转码并返回。\n\n**检测网络连接**\n\n检测网络连接就是用ping命令了，用python的subprocess module的call函数。我分别选择了华理校园网登录页面，百度，和微博三个进行检测。\n网络连接一共分为四种情况：\n\n*   3个网址都无法ping通: 那就return 'connect2none'\n*   能ping通登录首页，无法登录其他两个网站: 这就是指连接了校园网还没有登录校园网的情况。\n*   三个网站都能ping通:\n这个要进一步分析是否是没有登录校园网，以为在测试脚本的时候，会发现，即使用户没有登录校园网账号，ping外网还是能ping通，不知道这个是什么原因了，囧。那我 就尝试获取页面的title的方法看是不是相同来判断是否已登录校园网。单独在LoggerBase里面写了个获取title的方法：\n\n``` python\ndef get_page_title(self, url):\n    page_ctnt = urllib2.urlopen(url).read()\n    match = re.search(r'(<title>)(.*)(</title>)',page_ctnt)\n    return match.group(2) #title\n```\n\n如果获取的title相同，那说明指连接到了校园网不能连接到外网。如果都不同，外网就已经连接上了。*   能连接到校园网而且能够连接到其他两个任意一个:\n\n最终不知道为什么对于1m和4m的区分区别不开，opt选项无论是1还是2，登陆页面都显示已登陆，但是还是连不上外网。其中一些其他的form中的参数我也搞不懂是做什么的，就直接硬上了。。。最终脚本对于4m账号的有限连接有效，对于1m以及无线连接无效(´-ι_-｀)。\n\n","source":"_posts/2015-02-08-自动登陆华理校园网的python脚本.md","raw":"---\ntitle: 自动登陆华理校园网的python脚本\ntags:\n  - ecust\n  - loggers\n  - python\n  - 校园网\ndate: 2015-02-08 23:43:36\n---\n\n前段时间实验室的校园网总是被挤掉，虽然没用python写过爬虫，但是这也是契机来学习一下标准库里的`urllib,      urllib2, cookielib`等这些类似的Lib.于是就着手开始写了个自动检测网络连接，并自动连接校园网的python脚本([loggers|GitHub](https://github.com/PytLab/loggers \"loggers\"))，便于以后进行扩  展，分别写了两个类, 一个`class LoggerBase`, 一个子类`class EcustLogger(LoggerBase)`其中的代码风格模仿了这学期看的一个叫[CatMap|GitHub](https://github.com/ajmedford/catmap \"catmap\")的`Micro Kinetic Model`的风格，从其中学习了利用字典数据类型进行脚本日志的生成等， 例如\n\t**日志记录**\n\n``` python\ndef log(self, event, **kwargs):\n    \"append log info into log file\"\n    file_obj = open(self.log_file,'a')\n    #append new log infomation\n    message_template = Template(self._log_str[event])\n    message = message_template.substitute(kwargs)\n    append_ctnt = self._log_format % (message, '['+time.ctime()+']')\n    file_obj.write(append_ctnt)\n    file_obj.close()\n```\n其中日志的`log_str`如下：\n``` python\nself._log_str = {\n\t'match_file_fail' : 'No file link in \\'${url}\\'',\n\t'suffix_unmatch:' : ('Warning: unmatched suffix : \\'${suffix_1}\\' and '\n\t\t\t       '\\'${suffix_2}\\'\t,force to change to \\'${suffix_2}\\''),\n\t'illegal_path'    : 'illegal_path : ${illegal_path}',\n\t'download_fail'   : '${filename} download overtime',\n\t'download_times'  : '${filename} download time:${times} ',\n\t'download_time'   : '${filename} download time used : ${time_pass}s '\n\t}\n```\n这种生成日志的原理就是利用dict存固定格式的log语句，然后利用`re`模块的`substitute`方法替换其中的可变的字符串，然后写个`log()`方法吧字符串append到日志文件中。\n\n脚本原理还是很简单的，就是不断的想处理表单的程序发送请求，获取返回信息。由于本人对于网站的学习只学习了一点点皮毛，看到学校的校园网登陆的html代码发现处理表单的是一个cgi脚本，不是我以前写网站的时候直接用一个php页面来处理(这里我不是太懂，望轻喷)。\n**主要登陆的方法：**\n\n``` python\ndef do_login(self):\n    #set cookie\n    cj = cookielib.CookieJar()\n\n    url_login = self.url_login\n    form_data = self.form_data_dict\n        try:\n            opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\n            urllib2.install_opener(opener)\n            req=urllib2.Request(url_login,urllib.urlencode(form_data))\n            u=urllib2.urlopen(req)\n            return u.read().decode('utf-8').encode('gbk')\n        except:\n            print \"Ooops! Failed to log in !>_< there may be a problem.\"\n            return\n```\n首先先设置cookie，获取表单信息，向表单处理cgi发送request，华理的表单处理cgi在 http://172.20.13.100/cgi-bin/srun_portal 上。最后用`urllib2.urlopen()`抓取页面信息，转码并返回。\n\n**检测网络连接**\n\n检测网络连接就是用ping命令了，用python的subprocess module的call函数。我分别选择了华理校园网登录页面，百度，和微博三个进行检测。\n网络连接一共分为四种情况：\n\n*   3个网址都无法ping通: 那就return 'connect2none'\n*   能ping通登录首页，无法登录其他两个网站: 这就是指连接了校园网还没有登录校园网的情况。\n*   三个网站都能ping通:\n这个要进一步分析是否是没有登录校园网，以为在测试脚本的时候，会发现，即使用户没有登录校园网账号，ping外网还是能ping通，不知道这个是什么原因了，囧。那我 就尝试获取页面的title的方法看是不是相同来判断是否已登录校园网。单独在LoggerBase里面写了个获取title的方法：\n\n``` python\ndef get_page_title(self, url):\n    page_ctnt = urllib2.urlopen(url).read()\n    match = re.search(r'(<title>)(.*)(</title>)',page_ctnt)\n    return match.group(2) #title\n```\n\n如果获取的title相同，那说明指连接到了校园网不能连接到外网。如果都不同，外网就已经连接上了。*   能连接到校园网而且能够连接到其他两个任意一个:\n\n最终不知道为什么对于1m和4m的区分区别不开，opt选项无论是1还是2，登陆页面都显示已登陆，但是还是连不上外网。其中一些其他的form中的参数我也搞不懂是做什么的，就直接硬上了。。。最终脚本对于4m账号的有限连接有效，对于1m以及无线连接无效(´-ι_-｀)。\n\n","slug":"自动登陆华理校园网的python脚本","published":1,"updated":"2016-01-21T14:01:55.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijp15n94001jb8ie19miwv2l"}],"PostAsset":[],"PostCategory":[{"post_id":"cijp15n8m0012b8iepmb68ylg","category_id":"cijp15n8o0013b8ie5uoavn1c","_id":"cijp15n8r0016b8iefml7q0yn"}],"PostTag":[{"post_id":"cijp15n6e0005b8ie7s4s7zro","tag_id":"cijp15n6g0006b8ie9se1cou7","_id":"cijp15n6m0007b8iej19deyff"},{"post_id":"cijp15n6z0009b8ievqrze62z","tag_id":"cijp15n72000ab8ieb43x95va","_id":"cijp15n76000db8iewlwsimxu"},{"post_id":"cijp15n6z0009b8ievqrze62z","tag_id":"cijp15n76000bb8ie0oz19l8a","_id":"cijp15n79000eb8iedtanhetc"},{"post_id":"cijp15n6z0009b8ievqrze62z","tag_id":"cijp15n76000cb8iepdcaay98","_id":"cijp15n79000fb8ie6iwgyktw"},{"post_id":"cijp15n7c000gb8ie1sgnv7vx","tag_id":"cijp15n7e000hb8ieejz0plrb","_id":"cijp15n7f000ib8iejhuoc41i"},{"post_id":"cijp15n7c000gb8ie1sgnv7vx","tag_id":"cijp15n76000bb8ie0oz19l8a","_id":"cijp15n7g000jb8ie6iiff1c1"},{"post_id":"cijp15n7j000kb8ie2o86tuny","tag_id":"cijp15n7e000hb8ieejz0plrb","_id":"cijp15n7o000lb8ienb1eujhk"},{"post_id":"cijp15n7j000kb8ie2o86tuny","tag_id":"cijp15n76000bb8ie0oz19l8a","_id":"cijp15n7p000mb8ie2q0tphqw"},{"post_id":"cijp15n7r000nb8ieloyrss3u","tag_id":"cijp15n7t000ob8iebecsvjmf","_id":"cijp15n7v000qb8iepsuv7myq"},{"post_id":"cijp15n7r000nb8ieloyrss3u","tag_id":"cijp15n7u000pb8iewa0j1zmv","_id":"cijp15n7w000rb8ieeqtlpylu"},{"post_id":"cijp15n7y000sb8ied9fm1qb4","tag_id":"cijp15n7e000hb8ieejz0plrb","_id":"cijp15n80000tb8iepssb3y6v"},{"post_id":"cijp15n88000vb8iewks4yf4s","tag_id":"cijp15n7e000hb8ieejz0plrb","_id":"cijp15n8d000xb8iecxugqr79"},{"post_id":"cijp15n88000vb8iewks4yf4s","tag_id":"cijp15n8c000wb8ie0jzyel9f","_id":"cijp15n8e000yb8ie679p9ht8"},{"post_id":"cijp15n8h000zb8ie5goudj93","tag_id":"cijp15n8j0010b8iemgs6snxm","_id":"cijp15n8k0011b8ie9tw3f3ec"},{"post_id":"cijp15n8m0012b8iepmb68ylg","tag_id":"cijp15n8o0014b8ie69qheyer","_id":"cijp15n8s0017b8ie43np7q9d"},{"post_id":"cijp15n8m0012b8iepmb68ylg","tag_id":"cijp15n8q0015b8iecsdjtaxz","_id":"cijp15n8t0018b8ie6rt2osk9"},{"post_id":"cijp15n8v0019b8ieesjtsceo","tag_id":"cijp15n8y001ab8ietl2geue5","_id":"cijp15n90001eb8iedog93mv8"},{"post_id":"cijp15n8v0019b8ieesjtsceo","tag_id":"cijp15n72000ab8ieb43x95va","_id":"cijp15n90001fb8iejos1gj1t"},{"post_id":"cijp15n8v0019b8ieesjtsceo","tag_id":"cijp15n8z001bb8ieonlg55tl","_id":"cijp15n91001gb8iee1auw0st"},{"post_id":"cijp15n8v0019b8ieesjtsceo","tag_id":"cijp15n8z001cb8ie6er33by5","_id":"cijp15n91001hb8iepts5de9i"},{"post_id":"cijp15n8v0019b8ieesjtsceo","tag_id":"cijp15n90001db8ieml0alcmz","_id":"cijp15n91001ib8ieg7srstvq"},{"post_id":"cijp15n94001jb8ie19miwv2l","tag_id":"cijp15n98001kb8ietltkwg2h","_id":"cijp15n99001nb8ie45omdirq"},{"post_id":"cijp15n94001jb8ie19miwv2l","tag_id":"cijp15n98001lb8ie84ttw1jh","_id":"cijp15n9a001ob8ieqi3fcjc5"},{"post_id":"cijp15n94001jb8ie19miwv2l","tag_id":"cijp15n90001db8ieml0alcmz","_id":"cijp15n9b001pb8ie69tcn7zc"},{"post_id":"cijp15n94001jb8ie19miwv2l","tag_id":"cijp15n99001mb8ie4k8y2zjk","_id":"cijp15n9b001qb8ie0wnze6j5"}],"Tag":[{"name":"随笔","_id":"cijp15n6g0006b8ie9se1cou7"},{"name":"chemistry","_id":"cijp15n72000ab8ieb43x95va"},{"name":"Fortran","_id":"cijp15n76000bb8ie0oz19l8a"},{"name":"VASP","_id":"cijp15n76000cb8iepdcaay98"},{"name":"C","_id":"cijp15n7e000hb8ieejz0plrb"},{"name":"Git","_id":"cijp15n7t000ob8iebecsvjmf"},{"name":"GitHub","_id":"cijp15n7u000pb8iewa0j1zmv"},{"name":"Notes","_id":"cijp15n8c000wb8ie0jzyel9f"},{"name":"-VASP","_id":"cijp15n8j0010b8iemgs6snxm"},{"name":"GilbertStrang","_id":"cijp15n8o0014b8ie69qheyer"},{"name":"LinearAlgebra","_id":"cijp15n8q0015b8iecsdjtaxz"},{"name":"catalysis","_id":"cijp15n8y001ab8ietl2geue5"},{"name":"kinetic model","_id":"cijp15n8z001bb8ieonlg55tl"},{"name":"kinetics","_id":"cijp15n8z001cb8ie6er33by5"},{"name":"python","_id":"cijp15n90001db8ieml0alcmz"},{"name":"ecust","_id":"cijp15n98001kb8ietltkwg2h"},{"name":"loggers","_id":"cijp15n98001lb8ie84ttw1jh"},{"name":"校园网","_id":"cijp15n99001mb8ie4k8y2zjk"}]}}